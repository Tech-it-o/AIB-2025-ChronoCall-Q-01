import streamlit as st
import datetime
from google_auth_oauthlib.flow import Flow
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
import json
import re
import ast

st.set_page_config(page_title="Test-ChronoCall-Q", page_icon="üóìÔ∏è")

st.markdown("""
    <style>
    /* ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á */
    div[data-baseweb="input"] > div {
        border: 2px solid #a020f0 !important;
        border-radius: 6px;
        padding: 2px;
        box-shadow: none !important;
    }

    /* ‡∏ï‡∏≠‡∏ô focus ‡πÅ‡∏•‡πâ‡∏ß */
    div[data-baseweb="input"] > div:focus-within {
        border: 2px solid #a020f0 !important;
        box-shadow: 0 0 0 2px rgba(160, 32, 240, 0.3) !important;
    }

    /* input ‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏á‡∏≤‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏•‡∏¢ */
    input {
        border: none !important;
        outline: none !important;
        box-shadow: none !important;
    }

    /* ‡∏•‡∏ö‡∏û‡∏ß‡∏Å‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏ö‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà */
    .css-1cpxqw2, .css-1d391kg, .css-1y4p8pa {
        border: 2px solid #a020f0 !important;
        box-shadow: none !important;
    }

    /* force ‡∏Å‡∏•‡πà‡∏≠‡∏á input ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÅ‡∏°‡πâ‡∏à‡∏∞ error */
    div:has(input:focus) {
        border-color: #a020f0 !important;
    }
    </style>
""", unsafe_allow_html=True)


# --- Model ---

def convert_to_dict(text):
    match = re.search(r"<tool_call>\n(.*?)\n</tool_call>", text)

    if match:
        tool_dict_str = match.group(1)
        try:
            result = ast.literal_eval(tool_dict_str)
            return(result)
        except Exception as e:
            return({})
    else:
        return({})

# --- Model ---

model_name_or_path = "TechitoTamani/Qwen3-0.6B_FinetuneWithMyData-Merged"

with open('tools.json', 'r', encoding='utf-8') as f:
    TOOLS = json.load(f)

@st.cache_resource
def load_model_and_tokenizer():
    tokenizer = AutoTokenizer.from_pretrained(model_name_or_path)
    model = AutoModelForCausalLM.from_pretrained(
        model_name_or_path,
        torch_dtype=torch.bfloat16, # ‡∏£‡∏∞‡∏ö‡∏∏ dtype ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        device_map="auto",
        trust_remote_code=True,
    )
    return tokenizer, model

tokenizer, model = load_model_and_tokenizer()

def get_model_answer(messages):
    text = tokenizer.apply_chat_template(
        messages,
        tokenize=False,
        add_generation_prompt=True,
        tools=TOOLS,
        enable_thinking=False
    )
    inputs = tokenizer(text, return_tensors="pt").to(model.device)
    with torch.no_grad():
        outputs = model.generate(**inputs, max_new_tokens=512)
    output_text = tokenizer.batch_decode(outputs)[0][len(text):]
    return output_text

# --- Calendar ---

SCOPES = ['https://www.googleapis.com/auth/calendar']

with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

def create_flow():
    return Flow.from_client_config(
        {
            "web": {
                "client_id": st.secrets["client_id"],
                "client_secret": st.secrets["client_secret"],
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "redirect_uris": [st.secrets["redirect_uri"]],
            }
        },
        scopes=SCOPES,
        redirect_uri=st.secrets["redirect_uri"]
    )

def generate_auth_url(flow):
    auth_url, _ = flow.authorization_url(prompt='consent', access_type='offline', include_granted_scopes='true')
    return auth_url

def create_service(creds):
    return build("calendar", "v3", credentials=creds)

# --- Streamlit ---

def main():

    # ‡∏î‡∏∂‡∏á query params
    params = st.query_params
    code = params.get("code", None)

    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login
    if "credentials" not in st.session_state:
        if code:
            flow = create_flow()
            try:
                flow.fetch_token(code=code)
                creds = flow.credentials
                st.session_state["credentials"] = {
                    "token": creds.token,
                    "refresh_token": creds.refresh_token,
                    "token_uri": creds.token_uri,
                    "client_id": creds.client_id,
                    "client_secret": creds.client_secret,
                    "scopes": creds.scopes
                }
                st.success("üéâ ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                st.rerun()
            except Exception as e:
                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                return
        else:
            flow = create_flow()
            auth_url = generate_auth_url(flow)

            st.markdown(f"""
                <!-- ‡∏ä‡∏∑‡πà‡∏≠ -->
                <div class="fade-in-title custom-title">ChronoCall-Q</div>

                <!-- ‡∏õ‡∏∏‡πà‡∏° ‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤ -->
                <div class="fade-in-button login-button">
                    <a href="{auth_url}" target="_blank" rel="noopener noreferrer">
                        <button>Login with Google</button>
                    </a>
                </div>
            """, unsafe_allow_html=True)

            st.stop()

    # ‡∏ñ‡πâ‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß
    creds = Credentials(**st.session_state["credentials"])
    service = create_service(creds)

    st.title("ChronoCall-Q")
    st.caption("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'")

    if "user_input" not in st.session_state:
        st.session_state.user_input = ""

    if "messages" not in st.session_state:
        st.session_state.messages = [
            {"role": "system", "content": "You are Qwen, created by Alibaba Cloud. You are a helpful assistant.\n\nCurrent Date: 2025-02-01.\n\nCurrent Day: Saturday."},
        ]

    user_input = st.text_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", value=st.session_state.user_input, key="input")

    submit_button = st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")

    if (user_input and user_input != st.session_state.user_input) or submit_button:

        st.session_state.messages.append({"role": "user", "content": user_input})

        with st.spinner("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î..."):
            full_conversation_for_model = st.session_state.messages
            response = get_model_answer(full_conversation_for_model)

        st.session_state.messages.append({"role": "assistant", "content": response})

        func_call_dict = convert_to_dict(response)
        st.success(f"Qwen: {func_call_dict}")
        st.session_state.user_input = ""

    # with st.form("event_form"):
    #     summary = st.text_input("‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏ó‡∏µ‡∏°")
    #     location = st.text_input("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "Google Meet")
    #     start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°", datetime.date.today())
    #     end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î", datetime.date.today())
    #     submitted = st.form_submit_button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°")

    # if submitted:
    #     event = {
    #         'summary': summary,
    #         'location': location,
    #         'start': {
    #             'date': start_date.strftime("%Y-%m-%d"),
    #             'timeZone': 'Asia/Bangkok',
    #         },
    #         'end': {
    #             'date': end_date.strftime("%Y-%m-%d"),
    #             'timeZone': 'Asia/Bangkok',
    #         },
    #     }
    #     created_event = service.events().insert(calendarId='primary', body=event).execute()
    #     st.success(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: [‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡∏π‡πÉ‡∏ô Calendar]({created_event.get('htmlLink')})")

if __name__ == "__main__":
    main()