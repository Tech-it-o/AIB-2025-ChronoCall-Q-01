import streamlit as st
import google.generativeai as genai

try:
    api_key = st.secrets["gemini_api_key"]
    genai.configure(api_key=api_key)
except KeyError:
    st.error("Gemini API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤! ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏° 'gemini_api_key' ‡πÉ‡∏ô Streamlit Secrets ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå .streamlit/secrets.toml")
    st.stop()


st.set_page_config(page_title="Gemini Chatbot", page_icon="ü§ñ")
st.title("Chatbot Gemini")
st.caption("‡∏û‡∏¥‡∏°‡∏û‡πå")

if "messages" not in st.session_state:
    st.session_state.messages = []

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])

prompt = st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...")

if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)

    try:
        model = genai.GenerativeModel('gemini-1.5-flash')

        chat_history_for_gemini = []
        for message in st.session_state.messages:

            gemini_role = "model" if message["role"] == "assistant" else message["role"]
            chat_history_for_gemini.append({"role": gemini_role, "parts": [message["content"]]})

        chat = model.start_chat(history=chat_history_for_gemini[:-1])

        response = chat.send_message(prompt)

        assistant_response = response.text

    except Exception as e:
        assistant_response = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini ‡∏´‡∏£‡∏∑‡∏≠ API: {e}\n‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"

    st.session_state.messages.append({"role": "assistant", "content": assistant_response})
    with st.chat_message("assistant"):
        st.write(assistant_response)